Top javascript questions asked in interview
 
1. Program to find longest word in a given sentence ?

2. How to check whether a string is palindrome or not ?

3. Write a program to remove duplicates from an array ?

4. Program to find Reverse of a string without using built-in method ?

5. Find the max count of consecutive 1’s in an array ?

6. Find the factorial of given number ?

7. Given 2 arrays that are sorted [0,3,4,31] and [4,6,30]. Merge them and sort [0,3,4,4,6,30,31] ?

8. Create a function which will accepts two arrays arr1 and arr2. The function should return true if every value in arr1 has its corresponding value squared in array2. The frequency of values must be same.

9. Given two strings. Find if one string can be formed by rearranging the letters of other string.

10. Write logic to get unique objects from below array ?
I/P: [{name: "sai"},{name:"Nang"},{name: "sai"},{name:"Nang"},{name: "111111"}];
O/P: [{name: "sai"},{name:"Nang"}{name: "111111"}]

11. Write a JavaScript program to find the maximum number in an array.

12. Write a JavaScript function that takes an array of numbers and returns a new array with only the even numbers.

13. Write a JavaScript function to check if a given number is prime.

14. Write a JavaScript program to find the largest element in a nested array.
 [[3, 4, 58], [709, 8, 9, [10, 11]], [111, 2]]

15. Write a JavaScript function that returns the Fibonacci sequence up to a given number of terms.

16. Given a string, write a javascript function to count the occurrences of each character in the string.

17. Write a javascript function that sorts an array of numbers in ascending order.

18. Write a javascript function that sorts an array of numbers in descending order.

19. Write a javascript function that reverses the order of words in a sentence without using the built-in reverse() method.

20. Implement a javascript function that flattens a nested array into a single-dimensional array.

21. Write a function which converts string input into an object
 ("a.b.c", "someValue");
 {a: {b: {c: "someValue"}}}

- Tree data structure
- AVL Tree data structure
- Tree traversal (Inorder, preorder, postorder)
- Find height and width of a binary tree
- Flatten a binary tree to linked list
- Check if binary tree has path sum
- Check if binary tree is symmetric
- Check if binary tree is full
- Print right view of a binary tree
- Print left view of a binary tree
- Print top view of a binary tree
- Print bottom view of a binary tree
- Diagonal traversal of a binary tree
- Invert a binary tree | Recursive and Iterative
- Find the floor and ceil of the binary tree
- Find the least common ancestor (LCA) of a binary tree
- Find the kth smallest and largest element in a binary tree
- Serialize and deserialize a binary tree
- Find the inorder successor of a given key in BST
- Find the inorder predecessor of a given key in BST
- Deepest leaves sum of a binary tree 


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Top JavaScript questions to clear your interview

 1. Explain the differences between == and ===.
 Ans: - "=="
             Performs type coercion if necessary.
             It compares values after converting them to the same type.
        "==="
             Does not perform type coercion.
             It compares both value and type.
                

 2. What is event delegation, and how does it function in JavaScript?
 Ans :- Event delegation is a technique used in JavaScript to handle events more 
        efficiently by taking advantage of event bubbling. Instead of adding individual
        event listeners to multiple child elements, you attach a single event listener to
        a common ancestor (parent element). The event listener can then capture events triggered 
        by any of its child elements due to event propagation.

        How Event Delegation Works
                  1. Event Bubbling :-  When an event is triggered on an element, it first runs its handler and 
                     then bubbles up through its ancestor elements (parents) until it reaches the root (usually the document).
                     Event delegation leverages this bubbling phase.

                  2. Single Event Listener :-  Instead of attaching event listeners to every individual child element, you attach
                     one event listener to a common parent. This listener can catch events from all its child elements, even if 
                     they are dynamically added later.
                     
                 3. Identifying the Target :- When the event bubbles up to the parent, you can use the event object's target property
                    to determine which child element triggered the event. This allows you to handle the event appropriately.

 3. Can you provide an illustration of how ES6 has altered the approach to working with "this" in JavaScript?

 4. Explain the concept of prototypal inheritance.

 Ans : - Prototypal inheritance is a feature in JavaScript used to share properties and methods among objects.
         JavaScript’s inheritance is prototype-based. Objects can inherit properties and methods directly from other objects.

 5. Differentiate between a variable that is null, undefined, or undeclared.
 Ans : - 1. undefined - A variable that has been declared but has not been assigned a value.
                        let x;
                        console.log(x);

         2.   null    - A variable that has been assign a represent of No value.
                        let x = null;
                        console.log(x); 

         3. undeclared - A variable that has been not declear at a given poit of time.
                         console.log(y)                             

 6. Define what a closure is and describe its uses and advantages.
 Ans : - A closure in JavaScript is a function that has access to its own scope, the scope of the outer function, and the global scope,
         even after the outer function has returned.

         e.g - 

         function outerFunction() {
            let outerVariable = "I'm from the outer function";

             function innerFunction() {
                 console.log(outerVariable);
             }

             return innerFunction;
         }

         const closureFunction = outerFunction();
         closureFunction(); // Output: "I'm from the outer function"

         USES :- 
         1.Data Privacy / Encapsulation:
               Closures are commonly used to create private variables. In JavaScript,
               there’s no native way to create truly private variables, but closures allow
               you to encapsulate data and prevent it from being accessed directly from outside.

         2.Function Factories:
               Closures can be used to create functions with pre-configured values.

         3.Maintaining State in Asynchronous Code:
               Closures help maintain state in asynchronous programming, such as when using callbacks, promises, or event handlers.

         Advantages of Closures :
               1.Data Security: Private variables can't be tampered with directly from outside, helping in protecting data integrity.
               2.Cleaner Code: Closures enable modular, reusable, and concise code.
               3.State Preservation: Useful in preserving state across function calls, especially in asynchronous code.           

 7. Explain the primary distinction between the Array.forEach() loop and Array.map() method, as well as when to choose one over the other.
          
          1. forEach():
                  Purpose: The forEach() method is designed to iterate over each element in an array and execute a function for each element.
                  It is typically used when you want to perform a side effect, like logging or updating values, without needing to produce a new array.

                  Return Value: It does not return a new array. Instead, it returns undefined
          2.  map():
                  Purpose: The map() method is designed to transform each element in an array and produce a new array with the transformed elements.
                  It is primarily used when you need to derive a new array based on an existing one.
                  Return Value: It returns a new array with the results of applying the provided function to each element.        

 8. What is a common scenario for employing anonymous functions?
 Ans : - Anonymous functions are widely used in scenarios where a function is needed for a short duration, particularly when it doesn’t need to be reused or named. 

         Anonymous functions are often passed as arguments to higher-order functions
         like map(), filter(), forEach(), and reduce(). These are usually one-time operations that don’t require naming.

 9. Distinguish between host objects and native objects.

        1. Native object :- Native objects are built into the JavaScript language itself and are available in
                            any JavaScript environment. They are part of the ECMAScript specification.
                            Examples:
                                Array
                                Object
                                Function
                                Date
                                Math
                                RegExp

                            Characteristics:
                                Defined by the ECMAScript standard.
                                Present in all JavaScript environments.
                                Provide core functionalities like data manipulation, mathematical operations, and handling dates.

        2. Host Object  : - Host objects are provided by the environment in which JavaScript is running (e.g., a web browser or Node.js).
                            They are not part of the JavaScript specification but are made available to support interaction with the environment.
                        Examples:
                           In Web Browsers:
                                window
                                document
                                XMLHttpRequest
                                console
                           In Node.js:
                                fs (File System module)
                                http
                                process
                        Characteristics:
                                Provided by the runtime environment (like a browser or Node.js).
                                Allow interaction with features outside the core JavaScript engine, such as the DOM, network requests, or the file system.
                        Summary:
                                Native Objects are part of the core JavaScript language and are consistent across different environments.

                                Host Objects are environment-specific and extend JavaScript’s capabilities to interact with the environment 
                                (like the browser’s DOM or Node.js’s file system).        
                                                        

 10. Clarify the distinctions among 'function User(){}', 'var user = User()', and 'var user = new User()'
 Ans : -   function User() {}
                    What It Is: This defines a function named User. In JavaScript, functions can serve two purposes: as regular functions (to be called) 
                    or as constructors (to be used with new).
           var user = User()
                    What It Is: This calls the User function directly, executing the function’s code and assigning its return value (if any) to the variable user. 
           var user = new User()
                    What It Is: This creates a new instance of User using the constructor function.                

 11. Can you elucidate the purposes of Function.call and Function.apply, along with their notable differences?
 Ans :-      1. Function.Call()  :- The call method allows you to invoke a function with a specific this value and pass arguments individually.

             2. Function.apply() :- The apply method is similar to call, but it takes arguments as an array (or an array-like object) instead of individual arguments.

                Key Differences Between call and apply:
                            Argument Passing:
                                call: Accepts arguments individually (e.g., arg1, arg2, arg3).
                                apply: Accepts arguments as a single array (e.g., [arg1, arg2, arg3]).
                            Use Cases:
                                Use call when you know the number of arguments in advance and can list them out.
                                Use apply when the arguments are already in an array or when you don’t know the exact number of arguments.

 12. Describe the Function.prototype.bind method.

 13. Explain the differences between feature detection, feature inference, and utilizing the User Agent (UA) string.
            1. Feature Detection: The most reliable and recommended method. It directly checks if a feature is supported and is adaptable to future browser updates.

            2. Feature Inference: Involves guessing that a feature is available based on another feature. This method is prone to errors and is less reliable.

            3. User Agent String Detection: Relies on identifying the browser or device based on the UA string. This method is outdated, unreliable, and can be spoofed,
               making it the least recommended approach.

               In modern web development, feature detection is the preferred approach because it focuses on the actual capabilities of the environment, leading to more
               robust and maintainable code.

 14. Define the concept of "hoisting."
 Ans : -  Hoisting is a JavaScript behavior where variable and function declarations are moved (or "hoisted") to the top of their containing scope
          (either the global scope or function scope)during the compile phase, before the code is actually executed.

          Variable Hoisting: When a variable is declared using var, the declaration is hoisted to the top of its scope, but its initialization remains in place.
                             If you reference the variable before the initialization, its value will be undefined.

          let and const Hoisting: Variables declared with let and const are also hoisted, but they are not initialized until the code execution reaches the actual 
                                  line of declaration. This means they are in a "temporal dead zone" from the start of the scope until the declaration is encountered,
                                  and accessing them before their declaration results in a ReferenceError.  
         Summary : -
                                 Variable Hoisting: var declarations are hoisted and initialized with undefined, while let and const declarations are hoisted but not 
                                 initialized until the actual declaration line (leading to a temporal dead zone).

                                 Function Hoisting: Function declarations are fully hoisted and can be invoked before they are defined. Function expressions and arrow
                                 functions are not hoisted in the same way, leading to different behavior depending on whether they are declared with var, let, or const.                                         

 15. What is type coercion, and what are some common pitfalls associated with relying on it in JavaScript code?
 Ans : -  Type coercion in JavaScript refers to the automatic or implicit conversion of values from one data type to another. 

          1. Implicit Coercion: Happens automatically when JavaScript encounters mixed types.
                                 console.log(2 + "3"); // "23" (number 2 is coerced into a string, and then concatenated)
                                 console.log("5" - 1); // 4 (string "5" is coerced into a number)

          2. Explicit Coercion: Happens when you explicitly convert a value from one type to another using functions.
                                console.log(Number("42")); // 42 (string "42" is explicitly converted to a number)
                                console.log(String(100));  // "100" (number 100 is explicitly converted to a string)    

 16. Describe event bubbling and event capturing.

 17. What distinguishes an "attribute" from a "property"?
 
 Ans : - Aspect	                                 Attributes	                                                 Properties
          Where They Are Defined	         In the HTML markup	                                         On the JavaScript DOM object
          Scope of Use	                         Used primarily for setting default values	                 Reflects and controls the current state of the element
          Data Types	                         Always strings	                                                 Can be strings, numbers, booleans, objects, etc.
          Example	                         type="text" (HTML attribute)	                                 input.type (JavaScript property)
          Initial vs. Current State	         Represents the initial state defined in HTML	                 Represents the current state in the DOM object
          Manipulation Methods	                 getAttribute(), setAttribute(), removeAttribute()	         Accessed or modified directly using dot notation

 18. List the advantages and disadvantages of extending built-in JavaScript objects.

 19. Discuss the same-origin policy's implications for JavaScript.

 20. Why is it referred to as a "Ternary operator," and what does the term "Ternary" signify?

 21. Define strict mode and outline some of its advantages and disadvantages.

 22. Analyze the pros and cons of writing JavaScript code in a language that compiles to JavaScript.

 23. What tools and techniques do you employ for debugging JavaScript code?

 24. Enumerate the benefits and drawbacks of immutability and explain how you can achieve it in your code.

 25. Differentiate between synchronous and asynchronous functions and elucidate the event loop.

 26. Explain the disparities between variables created using let, var, or const.

 27. Compare ES6 classes and ES5 function constructors, and furnish a use case for the arrow (=>) function syntax.

 28. Describe the advantages of using the arrow syntax for methods in constructors.

 29. Define a higher-order function and provide an example of object or array destructuring.

 30. Give an example of generating a string using ES6 Template Literals and explain their benefits.

 31. Provide an example of a curry function and clarify why this syntax can be advantageous.

 32. Discuss the benefits of using spread syntax and differentiate it from rest syntax.

 33. Explain how code sharing between files can be accomplished.

 34. Define what a promise is and describe its applications.
